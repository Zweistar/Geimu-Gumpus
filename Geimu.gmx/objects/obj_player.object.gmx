<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-16</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>sprite9</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///These are all the variables that initialize when the player spawns

grav = 0.3;
hsp = 0;
vsp = 0;
jumpspeed_normal = 7;
jumpspeed_powerup = 10;
jumpspeed = jumpspeed_normal;
movespeed = 3;
jumppress = false;
plrdir = 1;
invuln = false
image_speed = 1/10
jump = 0
yplus = 0
yminus = 1
canshoot = 0
abilitytype = 0
canmove = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>canmove = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>invuln = false

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>canshoot = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>key_right = keyboard_check(vk_right);
key_left = -keyboard_check(vk_left);
key_jump = keyboard_check_pressed(vk_space);
move = key_left + key_right

if canmove = 0
{
hsp = move * movespeed;
}
if (hsp &gt; 0) plrdir = -1
 
if (hsp &lt; 0) plrdir = 1

// the stuff above here just sets up the left and right arrows to move you left or right. 
// key_left and key_right return either 1 or 0, so holding both makes you stand still.

if keyboard_check(vk_space) &amp;&amp; jump = 0
    {
    jump = 1
    }
  
//jumping

if hsp != 0 &amp;&amp; vsp = 0 &amp;&amp; jump = 0
    {
    sprite_index = spr_walk
    image_speed = 10/30
    image_xscale = plrdir
    }

// walking animation set to activate when you're moving horizontally, no airwalking.

if vsp != 0 &amp;&amp; jump = 1
    {
    grav = 0.2
    sprite_index = spr_jump
    image_speed = 35/30
    image_xscale = plrdir
    }
    
// Jumping animation, pretty simple

if vsp &lt;= 0 or vsp &gt;= 0
    {
    vsp = vsp + grav
    }
    
// This makes gravity exist. Vsp is vertical speed, and adding to it makes the player move downwards.

if vsp == 0 and (place_meeting(x,y+1,obj_wall_parent))
    {
    jump = 0
    }
if (place_meeting(x,y+1,obj_wall_parent))
    {
    jump = 0
    }
if hsp == 0 and (place_meeting(x,y+1,obj_wall_parent))
    {
    sprite_index = spr_player
    image_speed = 3/30
    image_xscale = plrdir
    }
    
// Collision data against all wall objects, dictated by "obj_wall_parent".

if keyboard_check_pressed(vk_space)
{
vsp = key_jump * -jumpspeed
jump = 1
}

// jumping again I guess

if(place_meeting(x+hsp,y,obj_wall_parent))
    {
    yplus = 0;
    while(place_meeting(x+hsp,y-yplus,obj_wall_parent) &amp;&amp; yplus &lt;= abs(2*hsp)) yplus += 1;
    if place_meeting(x+hsp,y-yplus,obj_wall_parent)
        {
        
        x += sign(hsp);
        hsp = 0; 
        }
    else
        {
        y -= yplus;
        }
    }

if !(place_meeting(x+hsp,y,obj_wall_parent)) &amp;&amp; !(place_meeting(x,y+yminus,obj_wall_parent)) &amp;&amp; jump = 0
    {
    while(place_meeting(x+hsp,y+yminus,obj_wall_parent) &amp;&amp; yminus &lt;= abs(1*hsp)) yminus += 1;
    if place_meeting(x+hsp,y+yminus,obj_wall_parent)
        {
        
        x += sign(hsp);
        hsp = 0; 
        }
    else
        {
        y += yminus;
        }
    }
    
// all of this was to walk up and down slopes

if keyboard_check_pressed(ord("Z")) &amp;&amp; canshoot = 0
    {
    if abilitytype = 1
        {
        script_execute(bombscript)
        canshoot = 1
        }
    }
    
// shoot the things, drop the bombs. It reads the script under "scripts" on the left.

if(place_meeting(x,y+vsp,obj_wall_parent))
    {
    while(!place_meeting(x,y+sign(vsp),obj_wall_parent))
        {
        y += sign(vsp);
        }   
       vsp = 0; 
    }
    
// collision!

if invuln = true
{
alarm[1] = 300
}

// invulnerability timer, 5 seconds when room speed is 60

x += hsp;
y += vsp;

// these update your position by adding your hsp and vsp to your X and Y coordinates. Simple stuff.
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
